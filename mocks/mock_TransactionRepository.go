// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"arise_tech_assetment/internal/domain"
	"arise_tech_assetment/internal/infrastructure/repository"
	"context"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) Create(ctx context.Context, entity *domain.Transaction) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Transaction) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.Transaction
func (_e *MockTransactionRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockTransactionRepository_Create_Call {
	return &MockTransactionRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockTransactionRepository_Create_Call) Run(run func(ctx context.Context, entity *domain.Transaction)) *MockTransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Transaction
		if args[1] != nil {
			arg1 = args[1].(*domain.Transaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_Create_Call) Return(err error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *domain.Transaction) error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTransactionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockTransactionRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockTransactionRepository_Delete_Call {
	return &MockTransactionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTransactionRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTransactionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_Delete_Call) Return(err error) *MockTransactionRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockTransactionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByAccountID provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByAccountID(ctx context.Context, accountID uuid.UUID) ([]domain.Transaction, error) {
	ret := _mock.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for FindByAccountID")
	}

	var r0 []domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.Transaction, error)); ok {
		return returnFunc(ctx, accountID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.Transaction); ok {
		r0 = returnFunc(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByAccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAccountID'
type MockTransactionRepository_FindByAccountID_Call struct {
	*mock.Call
}

// FindByAccountID is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
func (_e *MockTransactionRepository_Expecter) FindByAccountID(ctx interface{}, accountID interface{}) *MockTransactionRepository_FindByAccountID_Call {
	return &MockTransactionRepository_FindByAccountID_Call{Call: _e.mock.On("FindByAccountID", ctx, accountID)}
}

func (_c *MockTransactionRepository_FindByAccountID_Call) Run(run func(ctx context.Context, accountID uuid.UUID)) *MockTransactionRepository_FindByAccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByAccountID_Call) Return(transactions []domain.Transaction, err error) *MockTransactionRepository_FindByAccountID_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockTransactionRepository_FindByAccountID_Call) RunAndReturn(run func(ctx context.Context, accountID uuid.UUID) ([]domain.Transaction, error)) *MockTransactionRepository_FindByAccountID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByAccountIDPaginated provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByAccountIDPaginated(ctx context.Context, accountID uuid.UUID, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error) {
	ret := _mock.Called(ctx, accountID, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByAccountIDPaginated")
	}

	var r0 *repository.PaginationResponse[domain.Transaction]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)); ok {
		return returnFunc(ctx, accountID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, repository.PaginationRequest) *repository.PaginationResponse[domain.Transaction]); ok {
		r0 = returnFunc(ctx, accountID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Transaction])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, accountID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByAccountIDPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAccountIDPaginated'
type MockTransactionRepository_FindByAccountIDPaginated_Call struct {
	*mock.Call
}

// FindByAccountIDPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
//   - req repository.PaginationRequest
func (_e *MockTransactionRepository_Expecter) FindByAccountIDPaginated(ctx interface{}, accountID interface{}, req interface{}) *MockTransactionRepository_FindByAccountIDPaginated_Call {
	return &MockTransactionRepository_FindByAccountIDPaginated_Call{Call: _e.mock.On("FindByAccountIDPaginated", ctx, accountID, req)}
}

func (_c *MockTransactionRepository_FindByAccountIDPaginated_Call) Run(run func(ctx context.Context, accountID uuid.UUID, req repository.PaginationRequest)) *MockTransactionRepository_FindByAccountIDPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 repository.PaginationRequest
		if args[2] != nil {
			arg2 = args[2].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByAccountIDPaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Transaction], err error) *MockTransactionRepository_FindByAccountIDPaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockTransactionRepository_FindByAccountIDPaginated_Call) RunAndReturn(run func(ctx context.Context, accountID uuid.UUID, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)) *MockTransactionRepository_FindByAccountIDPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// FindByDateRange provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByDateRange(ctx context.Context, from time.Time, to time.Time) ([]domain.Transaction, error) {
	ret := _mock.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for FindByDateRange")
	}

	var r0 []domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]domain.Transaction, error)); ok {
		return returnFunc(ctx, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []domain.Transaction); ok {
		r0 = returnFunc(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByDateRange'
type MockTransactionRepository_FindByDateRange_Call struct {
	*mock.Call
}

// FindByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - from time.Time
//   - to time.Time
func (_e *MockTransactionRepository_Expecter) FindByDateRange(ctx interface{}, from interface{}, to interface{}) *MockTransactionRepository_FindByDateRange_Call {
	return &MockTransactionRepository_FindByDateRange_Call{Call: _e.mock.On("FindByDateRange", ctx, from, to)}
}

func (_c *MockTransactionRepository_FindByDateRange_Call) Run(run func(ctx context.Context, from time.Time, to time.Time)) *MockTransactionRepository_FindByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByDateRange_Call) Return(transactions []domain.Transaction, err error) *MockTransactionRepository_FindByDateRange_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockTransactionRepository_FindByDateRange_Call) RunAndReturn(run func(ctx context.Context, from time.Time, to time.Time) ([]domain.Transaction, error)) *MockTransactionRepository_FindByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// FindByDateRangePaginated provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByDateRangePaginated(ctx context.Context, from time.Time, to time.Time, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error) {
	ret := _mock.Called(ctx, from, to, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByDateRangePaginated")
	}

	var r0 *repository.PaginationResponse[domain.Transaction]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)); ok {
		return returnFunc(ctx, from, to, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, repository.PaginationRequest) *repository.PaginationResponse[domain.Transaction]); ok {
		r0 = returnFunc(ctx, from, to, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Transaction])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, from, to, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByDateRangePaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByDateRangePaginated'
type MockTransactionRepository_FindByDateRangePaginated_Call struct {
	*mock.Call
}

// FindByDateRangePaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - from time.Time
//   - to time.Time
//   - req repository.PaginationRequest
func (_e *MockTransactionRepository_Expecter) FindByDateRangePaginated(ctx interface{}, from interface{}, to interface{}, req interface{}) *MockTransactionRepository_FindByDateRangePaginated_Call {
	return &MockTransactionRepository_FindByDateRangePaginated_Call{Call: _e.mock.On("FindByDateRangePaginated", ctx, from, to, req)}
}

func (_c *MockTransactionRepository_FindByDateRangePaginated_Call) Run(run func(ctx context.Context, from time.Time, to time.Time, req repository.PaginationRequest)) *MockTransactionRepository_FindByDateRangePaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 repository.PaginationRequest
		if args[3] != nil {
			arg3 = args[3].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByDateRangePaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Transaction], err error) *MockTransactionRepository_FindByDateRangePaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockTransactionRepository_FindByDateRangePaginated_Call) RunAndReturn(run func(ctx context.Context, from time.Time, to time.Time, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)) *MockTransactionRepository_FindByDateRangePaginated_Call {
	_c.Call.Return(run)
	return _c
}

// FindByReference provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByReference(ctx context.Context, reference string) (*domain.Transaction, error) {
	ret := _mock.Called(ctx, reference)

	if len(ret) == 0 {
		panic("no return value specified for FindByReference")
	}

	var r0 *domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Transaction, error)); ok {
		return returnFunc(ctx, reference)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Transaction); ok {
		r0 = returnFunc(ctx, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, reference)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByReference'
type MockTransactionRepository_FindByReference_Call struct {
	*mock.Call
}

// FindByReference is a helper method to define mock.On call
//   - ctx context.Context
//   - reference string
func (_e *MockTransactionRepository_Expecter) FindByReference(ctx interface{}, reference interface{}) *MockTransactionRepository_FindByReference_Call {
	return &MockTransactionRepository_FindByReference_Call{Call: _e.mock.On("FindByReference", ctx, reference)}
}

func (_c *MockTransactionRepository_FindByReference_Call) Run(run func(ctx context.Context, reference string)) *MockTransactionRepository_FindByReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByReference_Call) Return(transaction *domain.Transaction, err error) *MockTransactionRepository_FindByReference_Call {
	_c.Call.Return(transaction, err)
	return _c
}

func (_c *MockTransactionRepository_FindByReference_Call) RunAndReturn(run func(ctx context.Context, reference string) (*domain.Transaction, error)) *MockTransactionRepository_FindByReference_Call {
	_c.Call.Return(run)
	return _c
}

// FindByStatus provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByStatus(ctx context.Context, status domain.TransactionStatus) ([]domain.Transaction, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatus")
	}

	var r0 []domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionStatus) ([]domain.Transaction, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionStatus) []domain.Transaction); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TransactionStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStatus'
type MockTransactionRepository_FindByStatus_Call struct {
	*mock.Call
}

// FindByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status domain.TransactionStatus
func (_e *MockTransactionRepository_Expecter) FindByStatus(ctx interface{}, status interface{}) *MockTransactionRepository_FindByStatus_Call {
	return &MockTransactionRepository_FindByStatus_Call{Call: _e.mock.On("FindByStatus", ctx, status)}
}

func (_c *MockTransactionRepository_FindByStatus_Call) Run(run func(ctx context.Context, status domain.TransactionStatus)) *MockTransactionRepository_FindByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TransactionStatus
		if args[1] != nil {
			arg1 = args[1].(domain.TransactionStatus)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByStatus_Call) Return(transactions []domain.Transaction, err error) *MockTransactionRepository_FindByStatus_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockTransactionRepository_FindByStatus_Call) RunAndReturn(run func(ctx context.Context, status domain.TransactionStatus) ([]domain.Transaction, error)) *MockTransactionRepository_FindByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindByStatusPaginated provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByStatusPaginated(ctx context.Context, status domain.TransactionStatus, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error) {
	ret := _mock.Called(ctx, status, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusPaginated")
	}

	var r0 *repository.PaginationResponse[domain.Transaction]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionStatus, repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)); ok {
		return returnFunc(ctx, status, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionStatus, repository.PaginationRequest) *repository.PaginationResponse[domain.Transaction]); ok {
		r0 = returnFunc(ctx, status, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Transaction])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TransactionStatus, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, status, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByStatusPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStatusPaginated'
type MockTransactionRepository_FindByStatusPaginated_Call struct {
	*mock.Call
}

// FindByStatusPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - status domain.TransactionStatus
//   - req repository.PaginationRequest
func (_e *MockTransactionRepository_Expecter) FindByStatusPaginated(ctx interface{}, status interface{}, req interface{}) *MockTransactionRepository_FindByStatusPaginated_Call {
	return &MockTransactionRepository_FindByStatusPaginated_Call{Call: _e.mock.On("FindByStatusPaginated", ctx, status, req)}
}

func (_c *MockTransactionRepository_FindByStatusPaginated_Call) Run(run func(ctx context.Context, status domain.TransactionStatus, req repository.PaginationRequest)) *MockTransactionRepository_FindByStatusPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TransactionStatus
		if args[1] != nil {
			arg1 = args[1].(domain.TransactionStatus)
		}
		var arg2 repository.PaginationRequest
		if args[2] != nil {
			arg2 = args[2].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByStatusPaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Transaction], err error) *MockTransactionRepository_FindByStatusPaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockTransactionRepository_FindByStatusPaginated_Call) RunAndReturn(run func(ctx context.Context, status domain.TransactionStatus, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)) *MockTransactionRepository_FindByStatusPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// FindByType provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByType(ctx context.Context, txType domain.TransactionType) ([]domain.Transaction, error) {
	ret := _mock.Called(ctx, txType)

	if len(ret) == 0 {
		panic("no return value specified for FindByType")
	}

	var r0 []domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionType) ([]domain.Transaction, error)); ok {
		return returnFunc(ctx, txType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionType) []domain.Transaction); ok {
		r0 = returnFunc(ctx, txType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TransactionType) error); ok {
		r1 = returnFunc(ctx, txType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByType'
type MockTransactionRepository_FindByType_Call struct {
	*mock.Call
}

// FindByType is a helper method to define mock.On call
//   - ctx context.Context
//   - txType domain.TransactionType
func (_e *MockTransactionRepository_Expecter) FindByType(ctx interface{}, txType interface{}) *MockTransactionRepository_FindByType_Call {
	return &MockTransactionRepository_FindByType_Call{Call: _e.mock.On("FindByType", ctx, txType)}
}

func (_c *MockTransactionRepository_FindByType_Call) Run(run func(ctx context.Context, txType domain.TransactionType)) *MockTransactionRepository_FindByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TransactionType
		if args[1] != nil {
			arg1 = args[1].(domain.TransactionType)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByType_Call) Return(transactions []domain.Transaction, err error) *MockTransactionRepository_FindByType_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockTransactionRepository_FindByType_Call) RunAndReturn(run func(ctx context.Context, txType domain.TransactionType) ([]domain.Transaction, error)) *MockTransactionRepository_FindByType_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTypePaginated provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) FindByTypePaginated(ctx context.Context, txType domain.TransactionType, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error) {
	ret := _mock.Called(ctx, txType, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByTypePaginated")
	}

	var r0 *repository.PaginationResponse[domain.Transaction]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionType, repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)); ok {
		return returnFunc(ctx, txType, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TransactionType, repository.PaginationRequest) *repository.PaginationResponse[domain.Transaction]); ok {
		r0 = returnFunc(ctx, txType, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Transaction])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TransactionType, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, txType, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_FindByTypePaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTypePaginated'
type MockTransactionRepository_FindByTypePaginated_Call struct {
	*mock.Call
}

// FindByTypePaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - txType domain.TransactionType
//   - req repository.PaginationRequest
func (_e *MockTransactionRepository_Expecter) FindByTypePaginated(ctx interface{}, txType interface{}, req interface{}) *MockTransactionRepository_FindByTypePaginated_Call {
	return &MockTransactionRepository_FindByTypePaginated_Call{Call: _e.mock.On("FindByTypePaginated", ctx, txType, req)}
}

func (_c *MockTransactionRepository_FindByTypePaginated_Call) Run(run func(ctx context.Context, txType domain.TransactionType, req repository.PaginationRequest)) *MockTransactionRepository_FindByTypePaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TransactionType
		if args[1] != nil {
			arg1 = args[1].(domain.TransactionType)
		}
		var arg2 repository.PaginationRequest
		if args[2] != nil {
			arg2 = args[2].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_FindByTypePaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Transaction], err error) *MockTransactionRepository_FindByTypePaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockTransactionRepository_FindByTypePaginated_Call) RunAndReturn(run func(ctx context.Context, txType domain.TransactionType, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)) *MockTransactionRepository_FindByTypePaginated_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) GetAll(ctx context.Context) ([]domain.Transaction, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Transaction, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Transaction); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockTransactionRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionRepository_Expecter) GetAll(ctx interface{}) *MockTransactionRepository_GetAll_Call {
	return &MockTransactionRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockTransactionRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockTransactionRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_GetAll_Call) Return(transactions []domain.Transaction, err error) *MockTransactionRepository_GetAll_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockTransactionRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Transaction, error)) *MockTransactionRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.Transaction, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Transaction, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Transaction); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTransactionRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockTransactionRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockTransactionRepository_GetByID_Call {
	return &MockTransactionRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTransactionRepository_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTransactionRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_GetByID_Call) Return(transaction *domain.Transaction, err error) *MockTransactionRepository_GetByID_Call {
	_c.Call.Return(transaction, err)
	return _c
}

func (_c *MockTransactionRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.Transaction, error)) *MockTransactionRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginated provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) GetPaginated(ctx context.Context, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginated")
	}

	var r0 *repository.PaginationResponse[domain.Transaction]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.PaginationRequest) *repository.PaginationResponse[domain.Transaction]); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Transaction])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_GetPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginated'
type MockTransactionRepository_GetPaginated_Call struct {
	*mock.Call
}

// GetPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - req repository.PaginationRequest
func (_e *MockTransactionRepository_Expecter) GetPaginated(ctx interface{}, req interface{}) *MockTransactionRepository_GetPaginated_Call {
	return &MockTransactionRepository_GetPaginated_Call{Call: _e.mock.On("GetPaginated", ctx, req)}
}

func (_c *MockTransactionRepository_GetPaginated_Call) Run(run func(ctx context.Context, req repository.PaginationRequest)) *MockTransactionRepository_GetPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository.PaginationRequest
		if args[1] != nil {
			arg1 = args[1].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_GetPaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Transaction], err error) *MockTransactionRepository_GetPaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockTransactionRepository_GetPaginated_Call) RunAndReturn(run func(ctx context.Context, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Transaction], error)) *MockTransactionRepository_GetPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) Update(ctx context.Context, entity *domain.Transaction) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Transaction) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTransactionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.Transaction
func (_e *MockTransactionRepository_Expecter) Update(ctx interface{}, entity interface{}) *MockTransactionRepository_Update_Call {
	return &MockTransactionRepository_Update_Call{Call: _e.mock.On("Update", ctx, entity)}
}

func (_c *MockTransactionRepository_Update_Call) Run(run func(ctx context.Context, entity *domain.Transaction)) *MockTransactionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Transaction
		if args[1] != nil {
			arg1 = args[1].(*domain.Transaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_Update_Call) Return(err error) *MockTransactionRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionRepository_Update_Call) RunAndReturn(run func(ctx context.Context, entity *domain.Transaction) error) *MockTransactionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
