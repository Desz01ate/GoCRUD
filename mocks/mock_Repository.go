// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"arise_tech_assessment/internal/infrastructure/repository"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository[T any, TKey any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository[T, TKey] {
	mock := &MockRepository[T, TKey]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository[T any, TKey any] struct {
	mock.Mock
}

type MockRepository_Expecter[T any, TKey any] struct {
	mock *mock.Mock
}

func (_m *MockRepository[T, TKey]) EXPECT() *MockRepository_Expecter[T, TKey] {
	return &MockRepository_Expecter[T, TKey]{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository[T, TKey]) Create(ctx context.Context, entity *T) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call[T any, TKey any] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *T
func (_e *MockRepository_Expecter[T, TKey]) Create(ctx interface{}, entity interface{}) *MockRepository_Create_Call[T, TKey] {
	return &MockRepository_Create_Call[T, TKey]{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockRepository_Create_Call[T, TKey]) Run(run func(ctx context.Context, entity *T)) *MockRepository_Create_Call[T, TKey] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *T
		if args[1] != nil {
			arg1 = args[1].(*T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call[T, TKey]) Return(err error) *MockRepository_Create_Call[T, TKey] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Create_Call[T, TKey]) RunAndReturn(run func(ctx context.Context, entity *T) error) *MockRepository_Create_Call[T, TKey] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository[T, TKey]) Delete(ctx context.Context, id TKey) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, TKey) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call[T any, TKey any] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id TKey
func (_e *MockRepository_Expecter[T, TKey]) Delete(ctx interface{}, id interface{}) *MockRepository_Delete_Call[T, TKey] {
	return &MockRepository_Delete_Call[T, TKey]{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockRepository_Delete_Call[T, TKey]) Run(run func(ctx context.Context, id TKey)) *MockRepository_Delete_Call[T, TKey] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 TKey
		if args[1] != nil {
			arg1 = args[1].(TKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Delete_Call[T, TKey]) Return(err error) *MockRepository_Delete_Call[T, TKey] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call[T, TKey]) RunAndReturn(run func(ctx context.Context, id TKey) error) *MockRepository_Delete_Call[T, TKey] {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockRepository
func (_mock *MockRepository[T, TKey]) GetAll(ctx context.Context) ([]T, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]T, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []T); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockRepository_GetAll_Call[T any, TKey any] struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter[T, TKey]) GetAll(ctx interface{}) *MockRepository_GetAll_Call[T, TKey] {
	return &MockRepository_GetAll_Call[T, TKey]{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockRepository_GetAll_Call[T, TKey]) Run(run func(ctx context.Context)) *MockRepository_GetAll_Call[T, TKey] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetAll_Call[T, TKey]) Return(vs []T, err error) *MockRepository_GetAll_Call[T, TKey] {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockRepository_GetAll_Call[T, TKey]) RunAndReturn(run func(ctx context.Context) ([]T, error)) *MockRepository_GetAll_Call[T, TKey] {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockRepository
func (_mock *MockRepository[T, TKey]) GetByID(ctx context.Context, id TKey) (*T, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, TKey) (*T, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, TKey) *T); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, TKey) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRepository_GetByID_Call[T any, TKey any] struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id TKey
func (_e *MockRepository_Expecter[T, TKey]) GetByID(ctx interface{}, id interface{}) *MockRepository_GetByID_Call[T, TKey] {
	return &MockRepository_GetByID_Call[T, TKey]{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockRepository_GetByID_Call[T, TKey]) Run(run func(ctx context.Context, id TKey)) *MockRepository_GetByID_Call[T, TKey] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 TKey
		if args[1] != nil {
			arg1 = args[1].(TKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetByID_Call[T, TKey]) Return(v *T, err error) *MockRepository_GetByID_Call[T, TKey] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_GetByID_Call[T, TKey]) RunAndReturn(run func(ctx context.Context, id TKey) (*T, error)) *MockRepository_GetByID_Call[T, TKey] {
	_c.Call.Return(run)
	return _c
}

// GetPaginated provides a mock function for the type MockRepository
func (_mock *MockRepository[T, TKey]) GetPaginated(ctx context.Context, req repository.PaginationRequest) (*repository.PaginationResponse[T], error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginated")
	}

	var r0 *repository.PaginationResponse[T]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.PaginationRequest) (*repository.PaginationResponse[T], error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.PaginationRequest) *repository.PaginationResponse[T]); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[T])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginated'
type MockRepository_GetPaginated_Call[T any, TKey any] struct {
	*mock.Call
}

// GetPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - req repository.PaginationRequest
func (_e *MockRepository_Expecter[T, TKey]) GetPaginated(ctx interface{}, req interface{}) *MockRepository_GetPaginated_Call[T, TKey] {
	return &MockRepository_GetPaginated_Call[T, TKey]{Call: _e.mock.On("GetPaginated", ctx, req)}
}

func (_c *MockRepository_GetPaginated_Call[T, TKey]) Run(run func(ctx context.Context, req repository.PaginationRequest)) *MockRepository_GetPaginated_Call[T, TKey] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository.PaginationRequest
		if args[1] != nil {
			arg1 = args[1].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetPaginated_Call[T, TKey]) Return(paginationResponse *repository.PaginationResponse[T], err error) *MockRepository_GetPaginated_Call[T, TKey] {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockRepository_GetPaginated_Call[T, TKey]) RunAndReturn(run func(ctx context.Context, req repository.PaginationRequest) (*repository.PaginationResponse[T], error)) *MockRepository_GetPaginated_Call[T, TKey] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository[T, TKey]) Update(ctx context.Context, entity *T) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call[T any, TKey any] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *T
func (_e *MockRepository_Expecter[T, TKey]) Update(ctx interface{}, entity interface{}) *MockRepository_Update_Call[T, TKey] {
	return &MockRepository_Update_Call[T, TKey]{Call: _e.mock.On("Update", ctx, entity)}
}

func (_c *MockRepository_Update_Call[T, TKey]) Run(run func(ctx context.Context, entity *T)) *MockRepository_Update_Call[T, TKey] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *T
		if args[1] != nil {
			arg1 = args[1].(*T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Update_Call[T, TKey]) Return(err error) *MockRepository_Update_Call[T, TKey] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Update_Call[T, TKey]) RunAndReturn(run func(ctx context.Context, entity *T) error) *MockRepository_Update_Call[T, TKey] {
	_c.Call.Return(run)
	return _c
}
