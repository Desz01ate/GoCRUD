// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"arise_tech_assessment/internal/domain"
	"arise_tech_assessment/internal/infrastructure/repository"
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Create(ctx context.Context, entity *domain.Account) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.Account
func (_e *MockAccountRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockAccountRepository_Create_Call {
	return &MockAccountRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockAccountRepository_Create_Call) Run(run func(ctx context.Context, entity *domain.Account)) *MockAccountRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Account
		if args[1] != nil {
			arg1 = args[1].(*domain.Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Create_Call) Return(err error) *MockAccountRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *domain.Account) error) *MockAccountRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAccountRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockAccountRepository_Delete_Call {
	return &MockAccountRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAccountRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAccountRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Delete_Call) Return(err error) *MockAccountRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockAccountRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByHolderName provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) FindByHolderName(ctx context.Context, holderName string) ([]domain.Account, error) {
	ret := _mock.Called(ctx, holderName)

	if len(ret) == 0 {
		panic("no return value specified for FindByHolderName")
	}

	var r0 []domain.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]domain.Account, error)); ok {
		return returnFunc(ctx, holderName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.Account); ok {
		r0 = returnFunc(ctx, holderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, holderName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_FindByHolderName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByHolderName'
type MockAccountRepository_FindByHolderName_Call struct {
	*mock.Call
}

// FindByHolderName is a helper method to define mock.On call
//   - ctx context.Context
//   - holderName string
func (_e *MockAccountRepository_Expecter) FindByHolderName(ctx interface{}, holderName interface{}) *MockAccountRepository_FindByHolderName_Call {
	return &MockAccountRepository_FindByHolderName_Call{Call: _e.mock.On("FindByHolderName", ctx, holderName)}
}

func (_c *MockAccountRepository_FindByHolderName_Call) Run(run func(ctx context.Context, holderName string)) *MockAccountRepository_FindByHolderName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_FindByHolderName_Call) Return(accounts []domain.Account, err error) *MockAccountRepository_FindByHolderName_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockAccountRepository_FindByHolderName_Call) RunAndReturn(run func(ctx context.Context, holderName string) ([]domain.Account, error)) *MockAccountRepository_FindByHolderName_Call {
	_c.Call.Return(run)
	return _c
}

// FindByHolderNamePaginated provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) FindByHolderNamePaginated(ctx context.Context, holderName string, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error) {
	ret := _mock.Called(ctx, holderName, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByHolderNamePaginated")
	}

	var r0 *repository.PaginationResponse[domain.Account]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error)); ok {
		return returnFunc(ctx, holderName, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, repository.PaginationRequest) *repository.PaginationResponse[domain.Account]); ok {
		r0 = returnFunc(ctx, holderName, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Account])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, holderName, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_FindByHolderNamePaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByHolderNamePaginated'
type MockAccountRepository_FindByHolderNamePaginated_Call struct {
	*mock.Call
}

// FindByHolderNamePaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - holderName string
//   - req repository.PaginationRequest
func (_e *MockAccountRepository_Expecter) FindByHolderNamePaginated(ctx interface{}, holderName interface{}, req interface{}) *MockAccountRepository_FindByHolderNamePaginated_Call {
	return &MockAccountRepository_FindByHolderNamePaginated_Call{Call: _e.mock.On("FindByHolderNamePaginated", ctx, holderName, req)}
}

func (_c *MockAccountRepository_FindByHolderNamePaginated_Call) Run(run func(ctx context.Context, holderName string, req repository.PaginationRequest)) *MockAccountRepository_FindByHolderNamePaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 repository.PaginationRequest
		if args[2] != nil {
			arg2 = args[2].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountRepository_FindByHolderNamePaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Account], err error) *MockAccountRepository_FindByHolderNamePaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockAccountRepository_FindByHolderNamePaginated_Call) RunAndReturn(run func(ctx context.Context, holderName string, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error)) *MockAccountRepository_FindByHolderNamePaginated_Call {
	_c.Call.Return(run)
	return _c
}

// FindByNumber provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) FindByNumber(ctx context.Context, number string) (*domain.Account, error) {
	ret := _mock.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for FindByNumber")
	}

	var r0 *domain.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Account, error)); ok {
		return returnFunc(ctx, number)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Account); ok {
		r0 = returnFunc(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_FindByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByNumber'
type MockAccountRepository_FindByNumber_Call struct {
	*mock.Call
}

// FindByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number string
func (_e *MockAccountRepository_Expecter) FindByNumber(ctx interface{}, number interface{}) *MockAccountRepository_FindByNumber_Call {
	return &MockAccountRepository_FindByNumber_Call{Call: _e.mock.On("FindByNumber", ctx, number)}
}

func (_c *MockAccountRepository_FindByNumber_Call) Run(run func(ctx context.Context, number string)) *MockAccountRepository_FindByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_FindByNumber_Call) Return(account *domain.Account, err error) *MockAccountRepository_FindByNumber_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountRepository_FindByNumber_Call) RunAndReturn(run func(ctx context.Context, number string) (*domain.Account, error)) *MockAccountRepository_FindByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// FindByStatus provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) FindByStatus(ctx context.Context, status domain.AccountStatus) ([]domain.Account, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatus")
	}

	var r0 []domain.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AccountStatus) ([]domain.Account, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AccountStatus) []domain.Account); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AccountStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_FindByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStatus'
type MockAccountRepository_FindByStatus_Call struct {
	*mock.Call
}

// FindByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status domain.AccountStatus
func (_e *MockAccountRepository_Expecter) FindByStatus(ctx interface{}, status interface{}) *MockAccountRepository_FindByStatus_Call {
	return &MockAccountRepository_FindByStatus_Call{Call: _e.mock.On("FindByStatus", ctx, status)}
}

func (_c *MockAccountRepository_FindByStatus_Call) Run(run func(ctx context.Context, status domain.AccountStatus)) *MockAccountRepository_FindByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AccountStatus
		if args[1] != nil {
			arg1 = args[1].(domain.AccountStatus)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_FindByStatus_Call) Return(accounts []domain.Account, err error) *MockAccountRepository_FindByStatus_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockAccountRepository_FindByStatus_Call) RunAndReturn(run func(ctx context.Context, status domain.AccountStatus) ([]domain.Account, error)) *MockAccountRepository_FindByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindByStatusPaginated provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) FindByStatusPaginated(ctx context.Context, status domain.AccountStatus, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error) {
	ret := _mock.Called(ctx, status, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusPaginated")
	}

	var r0 *repository.PaginationResponse[domain.Account]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AccountStatus, repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error)); ok {
		return returnFunc(ctx, status, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AccountStatus, repository.PaginationRequest) *repository.PaginationResponse[domain.Account]); ok {
		r0 = returnFunc(ctx, status, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Account])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AccountStatus, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, status, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_FindByStatusPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStatusPaginated'
type MockAccountRepository_FindByStatusPaginated_Call struct {
	*mock.Call
}

// FindByStatusPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - status domain.AccountStatus
//   - req repository.PaginationRequest
func (_e *MockAccountRepository_Expecter) FindByStatusPaginated(ctx interface{}, status interface{}, req interface{}) *MockAccountRepository_FindByStatusPaginated_Call {
	return &MockAccountRepository_FindByStatusPaginated_Call{Call: _e.mock.On("FindByStatusPaginated", ctx, status, req)}
}

func (_c *MockAccountRepository_FindByStatusPaginated_Call) Run(run func(ctx context.Context, status domain.AccountStatus, req repository.PaginationRequest)) *MockAccountRepository_FindByStatusPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AccountStatus
		if args[1] != nil {
			arg1 = args[1].(domain.AccountStatus)
		}
		var arg2 repository.PaginationRequest
		if args[2] != nil {
			arg2 = args[2].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountRepository_FindByStatusPaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Account], err error) *MockAccountRepository_FindByStatusPaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockAccountRepository_FindByStatusPaginated_Call) RunAndReturn(run func(ctx context.Context, status domain.AccountStatus, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error)) *MockAccountRepository_FindByStatusPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetAll(ctx context.Context) ([]domain.Account, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Account, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Account); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockAccountRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountRepository_Expecter) GetAll(ctx interface{}) *MockAccountRepository_GetAll_Call {
	return &MockAccountRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockAccountRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockAccountRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetAll_Call) Return(accounts []domain.Account, err error) *MockAccountRepository_GetAll_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockAccountRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Account, error)) *MockAccountRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAccountRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAccountRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockAccountRepository_GetByID_Call {
	return &MockAccountRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockAccountRepository_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAccountRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetByID_Call) Return(account *domain.Account, err error) *MockAccountRepository_GetByID_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.Account, error)) *MockAccountRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginated provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetPaginated(ctx context.Context, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginated")
	}

	var r0 *repository.PaginationResponse[domain.Account]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.PaginationRequest) *repository.PaginationResponse[domain.Account]); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.PaginationResponse[domain.Account])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository.PaginationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginated'
type MockAccountRepository_GetPaginated_Call struct {
	*mock.Call
}

// GetPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - req repository.PaginationRequest
func (_e *MockAccountRepository_Expecter) GetPaginated(ctx interface{}, req interface{}) *MockAccountRepository_GetPaginated_Call {
	return &MockAccountRepository_GetPaginated_Call{Call: _e.mock.On("GetPaginated", ctx, req)}
}

func (_c *MockAccountRepository_GetPaginated_Call) Run(run func(ctx context.Context, req repository.PaginationRequest)) *MockAccountRepository_GetPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository.PaginationRequest
		if args[1] != nil {
			arg1 = args[1].(repository.PaginationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetPaginated_Call) Return(paginationResponse *repository.PaginationResponse[domain.Account], err error) *MockAccountRepository_GetPaginated_Call {
	_c.Call.Return(paginationResponse, err)
	return _c
}

func (_c *MockAccountRepository_GetPaginated_Call) RunAndReturn(run func(ctx context.Context, req repository.PaginationRequest) (*repository.PaginationResponse[domain.Account], error)) *MockAccountRepository_GetPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Update(ctx context.Context, entity *domain.Account) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.Account
func (_e *MockAccountRepository_Expecter) Update(ctx interface{}, entity interface{}) *MockAccountRepository_Update_Call {
	return &MockAccountRepository_Update_Call{Call: _e.mock.On("Update", ctx, entity)}
}

func (_c *MockAccountRepository_Update_Call) Run(run func(ctx context.Context, entity *domain.Account)) *MockAccountRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Account
		if args[1] != nil {
			arg1 = args[1].(*domain.Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Update_Call) Return(err error) *MockAccountRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_Update_Call) RunAndReturn(run func(ctx context.Context, entity *domain.Account) error) *MockAccountRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
